name: CI DevSecOps Pipeline

on:
  push:
    branches: [ master, development ]
  pull_request:
    branches: [ master, development ]

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --no-restore

      - name: Run tests
        run: dotnet test --no-build --verbosity normal

      - name: Publish (Release)
        run: dotnet publish ./Raw-Solutions-TEST-Web-App/Raw-Solutions-TEST-Web-App.csproj -c Release -o ./publish

      - name: Upload web package
        uses: actions/upload-artifact@v4
        with:
          name: webapp
          path: ./publish

      - name: Build docker image
        working-directory: Raw-Solutions-TEST-Web-App
        run: docker build -t myapp:latest .

      - name: Save docker image
        run: docker save myapp:latest -o myapp.tar

      - name: Upload docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: myapp-image
          path: myapp.tar

  secret-scan:
    name: Secret Scan w/ Gitleaks
    runs-on: ubuntu-latest
    needs: [build]
    continue-on-error: ${{ github.ref_name != 'master' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Gitleaks
        run: |
          curl -sSL https://github.com/gitleaks/gitleaks/releases/download/v8.28.0/gitleaks_8.28.0_linux_x64.tar.gz | tar -xz
          sudo mv gitleaks /usr/local/bin/

      - name: Run Gitleaks Secret Scan
        run: gitleaks detect --source . --redact --report-format sarif --report-path secret-scan-results.sarif

      - name: Upload Gitleaks results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: secret-scan-results
          path: secret-scan-results.sarif

            - name: Upload Gitleaks to DefectDojo (master-only, guarded)
        if: ${{ github.ref_name == 'master' && hashFiles('secret-scan-results.sarif') != '' && secrets.DEFECTDOJO_API_KEY != '' }}
        continue-on-error: true
        run: |
          set -euxo pipefail
          echo "Uploading to DefectDojo host=${{ secrets.DEFECTDOJO_HOST }}"
          echo "File exists?"; ls -l secret-scan-results.sarif

          # ping host first to catch DNS/TLS issues clearly
          curl -sS -o /dev/null -w "HTTP %{http_code}\n" ${{ secrets.DEFECTDOJO_HOST }} || true

          # Call your composite action; capture exit code for logging
          set +e
          gh_exit=0
          echo "Invoking composite actionâ€¦"
          bash -lc 'echo "-> entering composite";'  # marker

          # Run the composite action:
          echo "::group::DefectDojo composite"
          # If your composite must be used with uses:, keep that instead of run:
          # Using the composite via 'uses' with soft-fail
          echo "::endgroup::"
          exit $gh_exit
        shell: bash

      # OR (preferred if your composite must be 'uses:')
      - name: Upload Gitleaks to DefectDojo (composite)
        if: ${{ github.ref_name == 'master' && hashFiles('secret-scan-results.sarif') != '' && secrets.DEFECTDOJO_API_KEY != '' }}
        continue-on-error: true
        uses: ./.github/actions/defectdojo-upload
        with:
          file: secret-scan-results.sarif
          scan_type: "Gitleaks Scan"
          master_engagement_id: ${{ secrets.MASTER_ENGAGEMENT_ID }}
          development_engagement_id: ${{ secrets.DEVELOPMENT_ENGAGEMENT_ID }}
          defectdojo_api_key: ${{ secrets.DEFECTDOJO_API_KEY }}
          defectdojo_host: ${{ secrets.DEFECTDOJO_HOST }}
          branch_name: ${{ github.ref_name }}


  image-scan:
    name: Image Scan w/ Trivy
    runs-on: ubuntu-latest
    needs: [build]
    continue-on-error: ${{ github.ref_name != 'master' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download docker image for Image Scan
        uses: actions/download-artifact@v5
        with:
          name: myapp-image
          path: ./myapp-image

      - name: Load docker image for Image Scan
        run: docker load -i myapp-image/myapp.tar

      - name: Run Trivy Image Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: myapp:latest
          format: 'sarif'
          output: 'image-scan-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

      - name: Upload Trivy Image Scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: image-scan-results
          path: image-scan-results.sarif

  sast:
    name: SAST w/ CodeQL
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    needs: [build]
    continue-on-error: ${{ github.ref_name != 'master' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Init CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp, javascript
          queries: security-extended,security-and-quality

      - name: Autobuild project
        uses: github/codeql-action/autobuild@v3

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          output: sast-results.sarif

      - name: Upload CodeQL SAST results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sast-results
          path: sast-results.sarif

  sca:
    name: SCA w/ Trivy
    runs-on: ubuntu-latest
    needs: [build]
    continue-on-error: ${{ github.ref_name != 'master' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy SCA
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'sca-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy SCA results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sca-results
          path: sca-results.sarif

  dast:
    name: DAST w/ OWASP ZAP
    runs-on: ubuntu-latest
    needs: [build, sast, sca, image-scan, secret-scan]
    continue-on-error: ${{ github.ref_name != 'master' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download docker image for DAST
        uses: actions/download-artifact@v5
        with:
          name: myapp-image
          path: ./myapp-image

      - name: Load docker image for DAST
        run: docker load -i myapp-image/myapp.tar

      - name: Start application docker container
        run: docker run -d -p 8080:8080 --name myapp myapp:latest

      - name: Wait for application to be ready
        run: |
          until curl -sf http://localhost:8080; do
            echo "Waiting for application be ready..."
            sleep 3
          done

      - name: Run baseline OWASP ZAP scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: 'http://localhost:8080'
          allow_issue_writing: false

      - name: Upload ZAP results (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dast-results
          path: owasp_zap_report.html
